{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","onChange","e","currentTarget","value","onKeyPress","charCode","className","onClick","EditableSpan","editMode","setEditMode","activateViewMode","onBlur","autoFocus","onDoubleClick","Todolist","changeFilter","innerHTML","id","changeTodoListTitle","removeTodolist","addTask","task","map","t","isDone","type","newIsDoneValue","checked","changeTaskStatus","newTitle","changeTaskTitle","removeTask","App","todolist1","v1","todolist2","tasks","setTasks","filter","todolists","setTodolists","todolistId","filtredTodolists","td","find","todolistTasks","newTask","remove","filteredTasks","todolist","tasksTarget","newTodolistId","allTodolistTasks","tasksForTodolist","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f324808.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = (props) => {\r\n    const [title, setTitle] = useState<string>();\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    let onChangeTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    let addItem = () => {\r\n        if (title && title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n\r\n    }\r\n    const onKeyPressHandler = (e: any) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n        <input onChange={onChangeTaskTitle}\r\n               onKeyPress={onKeyPressHandler}\r\n               value={title}\r\n               className={error ? 'error' : ''}\r\n        />\r\n        <button onClick={addItem}>+</button>\r\n        {error && <div className='error-message'>{error}</div>}\r\n    </div>\r\n\r\n\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (title: string) => void\r\n}\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (props: EditableSpanPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState<string>('');\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    };\r\n    let activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title);\r\n    };\r\n    let activateViewModeOnKeyPress = (e: any) => {\r\n          if(e.charCode === 13) {\r\n              activateViewMode();\r\n          }\r\n    }\r\n    let changeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n\r\n    };\r\n\r\n\r\n    return editMode\r\n        ? <input onBlur={activateViewMode}\r\n                 autoFocus\r\n                 onKeyPress={activateViewModeOnKeyPress}\r\n                 onChange={changeInputValue}\r\n                 value={title}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FiletValueType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type taskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    task: Array<taskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    filter: FiletValueType\r\n    changeFilter: (value: FiletValueType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    changeTodoListTitle: (newTitle: string, todolistId: string) => void\r\n}\r\n\r\n\r\nexport function Todolist(props: TodoListPropsType) {\r\n\r\n\r\n    let changeFilter = (e: any) => {\r\n        props.changeFilter(e.currentTarget.innerHTML, props.id)\r\n    }\r\n\r\n    let addTaskHandler = (title: string) => {\r\n        if (title && title.trim() !== '') {\r\n            props.addTask(title, props.id);\r\n        }\r\n    }\r\n\r\n    const onClickRemoveTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(title, props.id);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h3>\r\n                <EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n                <button onClick={onClickRemoveTodolist}>x</button>\r\n            </h3>\r\n\r\n            <div>\r\n                <AddItemForm addItem={addTaskHandler}/>\r\n            </div>\r\n            <ul>\r\n                {props.task\r\n                    .map(t => {\r\n\r\n\r\n                        let onClickHandler = () => props.removeTask(t.id, props.id);\r\n                        let onChangeHandlerChecked = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            let newIsDoneValue = e.currentTarget.checked;\r\n                            props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                        }\r\n                        let onChangeTaskTitleHandler = (newTitle: string) => {\r\n                            props.changeTaskTitle(t.id, newTitle, props.id);\r\n                        }\r\n\r\n                        return <li key={t.id}\r\n                                   className={t.isDone ? 'is-done' : ''}>\r\n                            <input type='checkbox'\r\n                                   onChange={onChangeHandlerChecked}\r\n                                   checked={t.isDone}\r\n                            />\r\n                            <EditableSpan title={t.title} onChange={onChangeTaskTitleHandler}/>\r\n                            <button onClick={onClickHandler}>x</button>\r\n                        </li>\r\n                    })}\r\n            </ul>\r\n\r\n\r\n            <button onClick={changeFilter}>All</button>\r\n            <button onClick={changeFilter}>Active</button>\r\n            <button onClick={changeFilter}>Completed</button>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {taskType, Todolist} from \"./Todolist\";\nimport {v1} from \"uuid\";\nimport {AddItemForm} from \"./AddItemForm\";\n\nexport type FiletValueType = 'All' | 'Active' | 'Completed';\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: FiletValueType\n}\nexport type TasksStateType = {\n    [key: string]: Array<taskType>\n}\n\nfunction App() {\n\n    let todolist1 = v1();\n    let todolist2 = v1();\n\n    const [tasks, setTasks] = useState<TasksStateType>({\n        [todolist1]: [\n            {id: v1(), title: 'PoP', isDone: false},\n            {id: v1(), title: 'Push', isDone: false},\n        ],\n        [todolist2]: [\n            {id: v1(), title: 'HTML', isDone: false},\n            {id: v1(), title: 'unShift', isDone: true},\n        ],\n    })\n\n    const [todolists, setTodolists] = useState<Array<TodoListType>>([\n        {\n            id: todolist1,\n            title: 'What to learn',\n            filter: \"All\"\n        },\n        {\n            id: todolist2,\n            title: 'What to eat',\n            filter: \"All\"\n        }])\n\n    let removeTodolist = (todolistId: string) => {\n        let filtredTodolists = todolists.filter(td => td.id !== todolistId);\n        setTodolists([...filtredTodolists]);\n\n    }\n\n\n    let changeTaskStatus = (id: string, isDone: boolean, todolistId: string) => {\n        let todolistTasks = tasks[todolistId];\n        let task = todolistTasks.find(t => t.id === id);\n        task && (task.isDone = isDone);\n        setTasks({...tasks});\n    }\n    let addTask = (title: string, todolistId: string) => {\n        let todolistTasks = tasks[todolistId];\n        const newTask: taskType = {id: v1(), title, isDone: false};\n        tasks[todolistId] = [newTask, ...todolistTasks];\n        setTasks({...tasks});\n    }\n    let remove = (id: string, todolistId: string) => {\n        let todolistTasks = tasks[todolistId];\n        let filteredTasks = todolistTasks.filter(t => t.id !== id);\n        tasks[todolistId] = [...filteredTasks];\n        setTasks({...tasks});\n    }\n\n    let changeFilter = (value: FiletValueType, todolistId: string) => {\n        let todolist = todolists.find(td => td.id === todolistId);\n        todolist && (todolist.filter = value);\n        setTodolists([...todolists]);\n\n    }\n    let addTodolist = (title: string) => {\n        let newTodolistId = v1();\n        let newTodolist: TodoListType = {id: newTodolistId, title, filter: \"All\"}\n        setTodolists([newTodolist, ...todolists]);\n        setTasks({\n            [newTodolistId]: [],\n            ...tasks\n        })\n    }\n    let changeTaskTitle = (id: string, newTitle: string, todolistId: string) => {\n        let todolistTasks = tasks[todolistId];\n        let tasksTarget = todolistTasks.find(t => t.id === id);\n        tasksTarget && (tasksTarget.title = newTitle);\n        setTasks({...tasks})\n    }\n    let changeTodoListTitle = (title: string, todolistId: string) => {\n        let todolist = todolists.find(td => td.id === todolistId);\n        todolist && (todolist.title = title);\n        setTodolists([...todolists]);\n    }\n\n\n    return (\n\n        <div className=\"App\">\n\n            <AddItemForm addItem={addTodolist}/>\n\n            {\n                todolists.map(td => {\n                    let allTodolistTasks = tasks[td.id];\n                    let tasksForTodolist = allTodolistTasks;\n\n                    if (td.filter === 'Completed') {\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone)\n                    }\n                    if (td.filter === 'Active') {\n                        tasksForTodolist = allTodolistTasks.filter(t => !t.isDone)\n                    }\n\n\n                    return (\n                        <Todolist\n                            key={td.id}\n                            id={td.id}\n                            title={td.title}\n                            removeTask={remove}\n                            filter={td.filter}\n                            changeFilter={changeFilter}\n                            addTask={addTask}\n                            changeTaskStatus={changeTaskStatus}\n                            task={tasksForTodolist}\n                            removeTodolist={removeTodolist}\n                            changeTaskTitle={changeTaskTitle}\n                            changeTodoListTitle={changeTodoListTitle}\n\n\n                        />\n                    )\n                })\n            }\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}